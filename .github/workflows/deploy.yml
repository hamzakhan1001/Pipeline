name: Build and Deploy Ghost Cloud latest code

on:
  push:
    branches:
      - ci/cd-setup

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: My-Environment

    env:
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: github-actions-pipeline
      ECS_CLUSTER: matomo
      TASK_DEF_NAME: testdummy
      SERVICE_NAME: testdummy-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # - name: Install dependencies and Docker 24.0.7
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y \
      #       apt-transport-https \
      #       ca-certificates \
      #       curl \
      #       gnupg \
      #       lsb-release

      #     # Remove old Docker version if installed
      #     sudo apt-get remove -y docker docker-engine docker.io containerd runc

      #     # Download Docker 24.0.7 tarball
      #     curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-24.0.7.tgz -o docker-24.0.7.tgz

      #     # Extract Docker tarball
      #     tar xzvf docker-24.0.7.tgz

      #     # Move Docker binaries to /usr/local/bin
      #     sudo mv docker/* /usr/local/bin/

      #     # Clean up tarball
      #     rm -rf docker docker-24.0.7.tgz

      #     # Verify installation
      #     docker --version
      #     docker info

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          docker build -t pipeline:$IMAGE_TAG .  
          docker tag pipeline:$IMAGE_TAG $ECR_REPOSITORY:$IMAGE_TAG  
          docker push $ECR_REPOSITORY:$IMAGE_TAG 
          # - name: Update ECS Service for myclient-service
          
      - name: Update ECS Service 
        run: |
          set -e
          echo "Updating ECS Service: $SERVICE_NAME..."

          # Get current task definition
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEF_NAME)

          # Replace image URL in task definition
          NEW_TASK_DEF=$(echo $TASK_DEF_JSON | jq --arg IMAGE "$ECR_REPOSITORY:$IMAGE_TAG" '
          .taskDefinition |
          {
            family: .family,
            executionRoleArn: .executionRoleArn,
            networkMode: .networkMode,
            containerDefinitions: (.containerDefinitions | map(if .name == "matomo" then .image = $IMAGE | .cpu = 0 else . end)),
            requiresCompatibilities: .requiresCompatibilities,
             memory: "922"
          }')

          echo "$NEW_TASK_DEF" > new-task-def.json

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)

          echo "New task definition registered: $NEW_TASK_DEF_ARN"

          # Update service with new task definition
          echo "Updating service to use new task definition..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $SERVICE_NAME \
            --task-definition "$NEW_TASK_DEF_ARN"

          echo "$SERVICE_NAME updated successfully."